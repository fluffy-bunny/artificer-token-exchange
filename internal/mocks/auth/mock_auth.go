// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/auth (interfaces: IOIDCAuthenticator,IAuthCookie)

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	oidc "github.com/coreos/go-oidc/v3/oidc"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	oauth2 "golang.org/x/oauth2"
)

// MockIOIDCAuthenticator is a mock of IOIDCAuthenticator interface.
type MockIOIDCAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockIOIDCAuthenticatorMockRecorder
}

// MockIOIDCAuthenticatorMockRecorder is the mock recorder for MockIOIDCAuthenticator.
type MockIOIDCAuthenticatorMockRecorder struct {
	mock *MockIOIDCAuthenticator
}

// NewMockIOIDCAuthenticator creates a new mock instance.
func NewMockIOIDCAuthenticator(ctrl *gomock.Controller) *MockIOIDCAuthenticator {
	mock := &MockIOIDCAuthenticator{ctrl: ctrl}
	mock.recorder = &MockIOIDCAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOIDCAuthenticator) EXPECT() *MockIOIDCAuthenticatorMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockIOIDCAuthenticator) AuthCodeURL(arg0 string, arg1 ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockIOIDCAuthenticatorMockRecorder) AuthCodeURL(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockIOIDCAuthenticator)(nil).AuthCodeURL), varargs...)
}

// Exchange mocks base method.
func (m *MockIOIDCAuthenticator) Exchange(arg0 context.Context, arg1 string, arg2 ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockIOIDCAuthenticatorMockRecorder) Exchange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockIOIDCAuthenticator)(nil).Exchange), varargs...)
}

// VerifyIDToken mocks base method.
func (m *MockIOIDCAuthenticator) VerifyIDToken(arg0 context.Context, arg1 *oauth2.Token) (*oidc.IDToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", arg0, arg1)
	ret0, _ := ret[0].(*oidc.IDToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockIOIDCAuthenticatorMockRecorder) VerifyIDToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockIOIDCAuthenticator)(nil).VerifyIDToken), arg0, arg1)
}

// MockIAuthCookie is a mock of IAuthCookie interface.
type MockIAuthCookie struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthCookieMockRecorder
}

// MockIAuthCookieMockRecorder is the mock recorder for MockIAuthCookie.
type MockIAuthCookieMockRecorder struct {
	mock *MockIAuthCookie
}

// NewMockIAuthCookie creates a new mock instance.
func NewMockIAuthCookie(ctrl *gomock.Controller) *MockIAuthCookie {
	mock := &MockIAuthCookie{ctrl: ctrl}
	mock.recorder = &MockIAuthCookieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthCookie) EXPECT() *MockIAuthCookieMockRecorder {
	return m.recorder
}

// DeleteAuthCookie mocks base method.
func (m *MockIAuthCookie) DeleteAuthCookie(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthCookie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthCookie indicates an expected call of DeleteAuthCookie.
func (mr *MockIAuthCookieMockRecorder) DeleteAuthCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthCookie", reflect.TypeOf((*MockIAuthCookie)(nil).DeleteAuthCookie), arg0)
}

// GetAuthCookieValue mocks base method.
func (m *MockIAuthCookie) GetAuthCookieValue(arg0 echo.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthCookieValue", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthCookieValue indicates an expected call of GetAuthCookieValue.
func (mr *MockIAuthCookieMockRecorder) GetAuthCookieValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthCookieValue", reflect.TypeOf((*MockIAuthCookie)(nil).GetAuthCookieValue), arg0)
}

// RefreshAuthCookie mocks base method.
func (m *MockIAuthCookie) RefreshAuthCookie(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAuthCookie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshAuthCookie indicates an expected call of RefreshAuthCookie.
func (mr *MockIAuthCookieMockRecorder) RefreshAuthCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAuthCookie", reflect.TypeOf((*MockIAuthCookie)(nil).RefreshAuthCookie), arg0)
}

// SetAuthCookieValue mocks base method.
func (m *MockIAuthCookie) SetAuthCookieValue(arg0 echo.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthCookieValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAuthCookieValue indicates an expected call of SetAuthCookieValue.
func (mr *MockIAuthCookieMockRecorder) SetAuthCookieValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthCookieValue", reflect.TypeOf((*MockIAuthCookie)(nil).SetAuthCookieValue), arg0, arg1)
}
