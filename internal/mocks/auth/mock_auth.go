// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/auth (interfaces: IInternalTokenStore,ITokenStore)

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockIInternalTokenStore is a mock of IInternalTokenStore interface.
type MockIInternalTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockIInternalTokenStoreMockRecorder
}

// MockIInternalTokenStoreMockRecorder is the mock recorder for MockIInternalTokenStore.
type MockIInternalTokenStoreMockRecorder struct {
	mock *MockIInternalTokenStore
}

// NewMockIInternalTokenStore creates a new mock instance.
func NewMockIInternalTokenStore(ctrl *gomock.Controller) *MockIInternalTokenStore {
	mock := &MockIInternalTokenStore{ctrl: ctrl}
	mock.recorder = &MockIInternalTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInternalTokenStore) EXPECT() *MockIInternalTokenStoreMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockIInternalTokenStore) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockIInternalTokenStoreMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIInternalTokenStore)(nil).Clear))
}

// GetToken mocks base method.
func (m *MockIInternalTokenStore) GetToken() (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockIInternalTokenStoreMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockIInternalTokenStore)(nil).GetToken))
}

// GetTokenByIdompotencyKey mocks base method.
func (m *MockIInternalTokenStore) GetTokenByIdompotencyKey(arg0 string) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByIdompotencyKey", arg0)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByIdompotencyKey indicates an expected call of GetTokenByIdompotencyKey.
func (mr *MockIInternalTokenStoreMockRecorder) GetTokenByIdompotencyKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByIdompotencyKey", reflect.TypeOf((*MockIInternalTokenStore)(nil).GetTokenByIdompotencyKey), arg0)
}

// StoreTokenByIdompotencyKey mocks base method.
func (m *MockIInternalTokenStore) StoreTokenByIdompotencyKey(arg0 string, arg1 *oauth2.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTokenByIdompotencyKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTokenByIdompotencyKey indicates an expected call of StoreTokenByIdompotencyKey.
func (mr *MockIInternalTokenStoreMockRecorder) StoreTokenByIdompotencyKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTokenByIdompotencyKey", reflect.TypeOf((*MockIInternalTokenStore)(nil).StoreTokenByIdompotencyKey), arg0, arg1)
}

// MockITokenStore is a mock of ITokenStore interface.
type MockITokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockITokenStoreMockRecorder
}

// MockITokenStoreMockRecorder is the mock recorder for MockITokenStore.
type MockITokenStoreMockRecorder struct {
	mock *MockITokenStore
}

// NewMockITokenStore creates a new mock instance.
func NewMockITokenStore(ctrl *gomock.Controller) *MockITokenStore {
	mock := &MockITokenStore{ctrl: ctrl}
	mock.recorder = &MockITokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenStore) EXPECT() *MockITokenStoreMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockITokenStore) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockITokenStoreMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockITokenStore)(nil).Clear))
}

// GetToken mocks base method.
func (m *MockITokenStore) GetToken() (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockITokenStoreMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockITokenStore)(nil).GetToken))
}
