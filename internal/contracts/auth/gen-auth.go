// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package auth

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIOIDCAuthenticator used when your service claims to implement IOIDCAuthenticator
var ReflectTypeIOIDCAuthenticator = di.GetInterfaceReflectType((*IOIDCAuthenticator)(nil))

// AddSingletonIOIDCAuthenticator adds a type that implements IOIDCAuthenticator
func AddSingletonIOIDCAuthenticator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIOIDCAuthenticatorWithMetadata adds a type that implements IOIDCAuthenticator
func AddSingletonIOIDCAuthenticatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIOIDCAuthenticatorByObj adds a prebuilt obj
func AddSingletonIOIDCAuthenticatorByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIOIDCAuthenticatorByObjWithMetadata adds a prebuilt obj
func AddSingletonIOIDCAuthenticatorByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIOIDCAuthenticatorByFunc adds a type by a custom func
func AddSingletonIOIDCAuthenticatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIOIDCAuthenticatorByFuncWithMetadata adds a type by a custom func
func AddSingletonIOIDCAuthenticatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIOIDCAuthenticator adds a type that implements IOIDCAuthenticator
func AddTransientIOIDCAuthenticator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIOIDCAuthenticatorWithMetadata adds a type that implements IOIDCAuthenticator
func AddTransientIOIDCAuthenticatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIOIDCAuthenticatorByFunc adds a type by a custom func
func AddTransientIOIDCAuthenticatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIOIDCAuthenticatorByFuncWithMetadata adds a type by a custom func
func AddTransientIOIDCAuthenticatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIOIDCAuthenticator adds a type that implements IOIDCAuthenticator
func AddScopedIOIDCAuthenticator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIOIDCAuthenticatorWithMetadata adds a type that implements IOIDCAuthenticator
func AddScopedIOIDCAuthenticatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIOIDCAuthenticatorByFunc adds a type by a custom func
func AddScopedIOIDCAuthenticatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIOIDCAuthenticatorByFuncWithMetadata adds a type by a custom func
func AddScopedIOIDCAuthenticatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIOIDCAuthenticator)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIOIDCAuthenticator removes all IOIDCAuthenticator from the DI
func RemoveAllIOIDCAuthenticator(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIOIDCAuthenticator)
}

// GetIOIDCAuthenticatorFromContainer alternative to SafeGetIOIDCAuthenticatorFromContainer but panics of object is not present
func GetIOIDCAuthenticatorFromContainer(ctn di.Container) IOIDCAuthenticator {
	return ctn.GetByType(ReflectTypeIOIDCAuthenticator).(IOIDCAuthenticator)
}

// GetManyIOIDCAuthenticatorFromContainer alternative to SafeGetManyIOIDCAuthenticatorFromContainer but panics of object is not present
func GetManyIOIDCAuthenticatorFromContainer(ctn di.Container) []IOIDCAuthenticator {
	objs := ctn.GetManyByType(ReflectTypeIOIDCAuthenticator)
	var results []IOIDCAuthenticator
	for _, obj := range objs {
		results = append(results, obj.(IOIDCAuthenticator))
	}
	return results
}

// SafeGetIOIDCAuthenticatorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIOIDCAuthenticatorFromContainer(ctn di.Container) (IOIDCAuthenticator, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIOIDCAuthenticator)
	if err != nil {
		return nil, err
	}
	return obj.(IOIDCAuthenticator), nil
}

// GetIOIDCAuthenticatorDefinition returns that last definition registered that this container can provide
func GetIOIDCAuthenticatorDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIOIDCAuthenticator)
	return def
}

// GetIOIDCAuthenticatorDefinitions returns all definitions that this container can provide
func GetIOIDCAuthenticatorDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIOIDCAuthenticator)
	return defs
}

// SafeGetManyIOIDCAuthenticatorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIOIDCAuthenticatorFromContainer(ctn di.Container) ([]IOIDCAuthenticator, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIOIDCAuthenticator)
	if err != nil {
		return nil, err
	}
	var results []IOIDCAuthenticator
	for _, obj := range objs {
		results = append(results, obj.(IOIDCAuthenticator))
	}
	return results, nil
}

// ReflectTypeIAuthCookie used when your service claims to implement IAuthCookie
var ReflectTypeIAuthCookie = di.GetInterfaceReflectType((*IAuthCookie)(nil))

// AddSingletonIAuthCookie adds a type that implements IAuthCookie
func AddSingletonIAuthCookie(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIAuthCookieWithMetadata adds a type that implements IAuthCookie
func AddSingletonIAuthCookieWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIAuthCookieByObj adds a prebuilt obj
func AddSingletonIAuthCookieByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIAuthCookieByObjWithMetadata adds a prebuilt obj
func AddSingletonIAuthCookieByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIAuthCookieByFunc adds a type by a custom func
func AddSingletonIAuthCookieByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIAuthCookieByFuncWithMetadata adds a type by a custom func
func AddSingletonIAuthCookieByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIAuthCookie adds a type that implements IAuthCookie
func AddTransientIAuthCookie(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIAuthCookieWithMetadata adds a type that implements IAuthCookie
func AddTransientIAuthCookieWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIAuthCookieByFunc adds a type by a custom func
func AddTransientIAuthCookieByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIAuthCookieByFuncWithMetadata adds a type by a custom func
func AddTransientIAuthCookieByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIAuthCookie adds a type that implements IAuthCookie
func AddScopedIAuthCookie(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIAuthCookieWithMetadata adds a type that implements IAuthCookie
func AddScopedIAuthCookieWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIAuthCookieByFunc adds a type by a custom func
func AddScopedIAuthCookieByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIAuthCookieByFuncWithMetadata adds a type by a custom func
func AddScopedIAuthCookieByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthCookie)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIAuthCookie removes all IAuthCookie from the DI
func RemoveAllIAuthCookie(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIAuthCookie)
}

// GetIAuthCookieFromContainer alternative to SafeGetIAuthCookieFromContainer but panics of object is not present
func GetIAuthCookieFromContainer(ctn di.Container) IAuthCookie {
	return ctn.GetByType(ReflectTypeIAuthCookie).(IAuthCookie)
}

// GetManyIAuthCookieFromContainer alternative to SafeGetManyIAuthCookieFromContainer but panics of object is not present
func GetManyIAuthCookieFromContainer(ctn di.Container) []IAuthCookie {
	objs := ctn.GetManyByType(ReflectTypeIAuthCookie)
	var results []IAuthCookie
	for _, obj := range objs {
		results = append(results, obj.(IAuthCookie))
	}
	return results
}

// SafeGetIAuthCookieFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIAuthCookieFromContainer(ctn di.Container) (IAuthCookie, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIAuthCookie)
	if err != nil {
		return nil, err
	}
	return obj.(IAuthCookie), nil
}

// GetIAuthCookieDefinition returns that last definition registered that this container can provide
func GetIAuthCookieDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIAuthCookie)
	return def
}

// GetIAuthCookieDefinitions returns all definitions that this container can provide
func GetIAuthCookieDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIAuthCookie)
	return defs
}

// SafeGetManyIAuthCookieFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIAuthCookieFromContainer(ctn di.Container) ([]IAuthCookie, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIAuthCookie)
	if err != nil {
		return nil, err
	}
	var results []IAuthCookie
	for _, obj := range objs {
		results = append(results, obj.(IAuthCookie))
	}
	return results, nil
}
