// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package auth

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIAuthArtifacts used when your service claims to implement IAuthArtifacts
var ReflectTypeIAuthArtifacts = di.GetInterfaceReflectType((*IAuthArtifacts)(nil))

// AddSingletonIAuthArtifacts adds a type that implements IAuthArtifacts
func AddSingletonIAuthArtifacts(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIAuthArtifactsWithMetadata adds a type that implements IAuthArtifacts
func AddSingletonIAuthArtifactsWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIAuthArtifactsByObj adds a prebuilt obj
func AddSingletonIAuthArtifactsByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIAuthArtifactsByObjWithMetadata adds a prebuilt obj
func AddSingletonIAuthArtifactsByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIAuthArtifactsByFunc adds a type by a custom func
func AddSingletonIAuthArtifactsByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIAuthArtifactsByFuncWithMetadata adds a type by a custom func
func AddSingletonIAuthArtifactsByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIAuthArtifacts adds a type that implements IAuthArtifacts
func AddTransientIAuthArtifacts(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIAuthArtifactsWithMetadata adds a type that implements IAuthArtifacts
func AddTransientIAuthArtifactsWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIAuthArtifactsByFunc adds a type by a custom func
func AddTransientIAuthArtifactsByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIAuthArtifactsByFuncWithMetadata adds a type by a custom func
func AddTransientIAuthArtifactsByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIAuthArtifacts adds a type that implements IAuthArtifacts
func AddScopedIAuthArtifacts(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIAuthArtifactsWithMetadata adds a type that implements IAuthArtifacts
func AddScopedIAuthArtifactsWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIAuthArtifactsByFunc adds a type by a custom func
func AddScopedIAuthArtifactsByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIAuthArtifactsByFuncWithMetadata adds a type by a custom func
func AddScopedIAuthArtifactsByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIAuthArtifacts)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIAuthArtifacts removes all IAuthArtifacts from the DI
func RemoveAllIAuthArtifacts(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIAuthArtifacts)
}

// GetIAuthArtifactsFromContainer alternative to SafeGetIAuthArtifactsFromContainer but panics of object is not present
func GetIAuthArtifactsFromContainer(ctn di.Container) IAuthArtifacts {
	return ctn.GetByType(ReflectTypeIAuthArtifacts).(IAuthArtifacts)
}

// GetManyIAuthArtifactsFromContainer alternative to SafeGetManyIAuthArtifactsFromContainer but panics of object is not present
func GetManyIAuthArtifactsFromContainer(ctn di.Container) []IAuthArtifacts {
	objs := ctn.GetManyByType(ReflectTypeIAuthArtifacts)
	var results []IAuthArtifacts
	for _, obj := range objs {
		results = append(results, obj.(IAuthArtifacts))
	}
	return results
}

// SafeGetIAuthArtifactsFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIAuthArtifactsFromContainer(ctn di.Container) (IAuthArtifacts, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIAuthArtifacts)
	if err != nil {
		return nil, err
	}
	return obj.(IAuthArtifacts), nil
}

// GetIAuthArtifactsDefinition returns that last definition registered that this container can provide
func GetIAuthArtifactsDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIAuthArtifacts)
	return def
}

// GetIAuthArtifactsDefinitions returns all definitions that this container can provide
func GetIAuthArtifactsDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIAuthArtifacts)
	return defs
}

// SafeGetManyIAuthArtifactsFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIAuthArtifactsFromContainer(ctn di.Container) ([]IAuthArtifacts, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIAuthArtifacts)
	if err != nil {
		return nil, err
	}
	var results []IAuthArtifacts
	for _, obj := range objs {
		results = append(results, obj.(IAuthArtifacts))
	}
	return results, nil
}
